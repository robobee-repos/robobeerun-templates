/*
 * Add nginx ingress configuration.
 * 
 * Example:
 * 
 * import "_ingress_config.stg"
 * 
 * xx-site-ingress-yaml(parent, vars) ::= <<
 * apiVersion: extensions/v1beta1
 * kind: Ingress
 * metadata:
 *   name: site
 *   namespace: site-com
 *   labels:
 *     app: site
 *     tier: frontend
 *     deployment: site
 *   annotations:
 *     <ingressDefaultAnnotations(parent, vars, vars.site.nginx)>
 * spec:
 *   <ingressDefaultSpec(parent, vars, vars.nginx, "wordpress")>
 * 
 */

/*
 * Creates the ingress annotations.
 * 
 * Optional:
 *
 * vars.clientMaxBodySize
 *
 */
ingressDefaultAnnotations(vars) ::= <<
kubernetes.io/ingress.class: "nginx"
nginx.ingress.kubernetes.io/affinity: "cookie"
nginx.ingress.kubernetes.io/session-cookie-name: "route"
nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
nginx.ingress.kubernetes.io/from-to-www-redirect: "true"
<if(vars.clientMaxBodySize)>nginx.org/client-max-body-size: "<vars.clientMaxBodySize>"<endif>
>>

/*
 * Creates the ingress specification based on the hosts.
 * 
 * Parameters:
 * 
 * vars additional variables.
 * name the name of the service.
 * 
 * Mandatory:
 *
 * vars.hosts[]
 *     the list of hosts.
 * name
 *     the service name.
 * 
 */
ingressDefaultSpec(vars, name) ::= <<
tls:
- hosts:
  <vars.hosts:{h|- <h>};separator="\n">
  secretName: <name>-tls
rules:
  <vars.hosts:hostRule(name);separator="\n">
>>

hostRule(host, name) ::= <<
- host: <host>
  http:
    paths:
    - path: /
      backend:
        serviceName: <name>
        servicePort: 8080
>>

/*
 * Creates the service that is used by the ingress to access the application.
 * 
 * Mandatory:
 * 
 * vars
 *     additional variables.
 * name
 *     the name of the service.
 * app
 *     the name of the application.
 * namespace
 *     the namespace of the service.
 * 
 * Optional:
 * 
 * vars.port
 *     the application port, defaults to 8080.
 * 
 */
ingressService(vars, name, app, namespace) ::= <<
apiVersion: v1
kind: Service
metadata:
  name: <name>
  namespace: <namespace>
  labels:
    app: <app>
spec:
  ports:
  - name: "http"
    port: 8080
    targetPort: <if(vars.port)><vars.port><else>8080<endif>
  selector:
    app: <app>

>>

