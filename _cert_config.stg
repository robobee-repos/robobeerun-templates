/*
 * Mandatory:
 *
 * vars.hosts
 * 
 * Example:
 * 
 * import "_cert_config.stg"
 * 
 * xx-site-ingress-yaml(parent, vars) ::= <<
 * apiVersion: certmanager.k8s.io/v1alpha1
 * kind: Certificate
 * metadata:
 *   name: site-com
 *   namespace: site-com
 * spec:
 *   <certDefaultSpecProd(vars.nginx, "site-com")>
 *
 * >>
 */

/*
 * Mandatory:
 *
 * vars.hosts[]
 *     the list of hosts.
 * name
 *     the secret name.
 * 
 */
certDefaultSpecLetsencryptProd(vars, name) ::= <<
<certDefaultSpecLetsencryptStage(vars, name, "prod")>
>>

/*
 * Mandatory:
 *
 * vars.hosts[]
 *     the list of hosts.
 * name
 *     the secret name.
 * 
 */
certDefaultSpecLetsencryptStaging(vars, name) ::= <<
<certDefaultSpecLetsencryptStage(vars, name, "staging")>
>>

/*
 * Mandatory:
 *
 * vars.hosts[]
 *     the list of hosts.
 * name
 *     the secret name.
 * stage
 *     the stage, either 'prod' or 'staging'.
 */
certDefaultSpecLetsencryptStage(vars, name, stage) ::= <<
secretName: <name>-tls
issuerRef:
  name: letsencrypt-<stage>
  kind: ClusterIssuer
commonName: <first(vars.hosts)>
dnsNames:
<rest(vars.hosts):certDomain();separator="\n">
acme:
  config:
  - http01:
      ingressClass: nginx
    domains:
    <vars.hosts:certDomain();separator="\n">

>>

/*
 * Mandatory:
 *
 * vars.hosts[]
 *     the list of hosts.
 * name
 *     the secret name.
 * issuer
 *     the issuer name.
 */
certDefaultSpec(vars, name, issuer) ::= <<
secretName: <name>-tls
issuerRef:
  name: <issuer>
  kind: ClusterIssuer
commonName: <first(vars.hosts)>
dnsNames:
<rest(vars.hosts):certDomain();separator="\n">
acme:
  config:
  - http01:
      ingressClass: nginx
    domains:
    <vars.hosts:certDomain();separator="\n">

>>

certDomain(host) ::= <<
- <host>
>>
